Index: src/main/java/jm/task/core/jdbc/dao/UserDaoHibernateImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc.dao;\r\n\r\nimport jm.task.core.jdbc.model.User;\r\nimport jm.task.core.jdbc.util.Util;\r\nimport org.hibernate.HibernateException;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UserDaoHibernateImpl extends Util implements UserDao {\r\n\r\n    SessionFactory sessionFactory;\r\n\r\n    public UserDaoHibernateImpl() {\r\n        sessionFactory = getConfiguration();\r\n        sessionFactory.openSession();\r\n    }\r\n\r\n    @Override\r\n    public void createUsersTable() {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.beginTransaction();\r\n            session.createNativeQuery(\"\"\"\r\n                                                CREATE TABLE IF NOT EXISTS users (\r\n                                                    id int PRIMARY KEY AUTO_INCREMENT,\r\n                                                    name varchar(100),\r\n                                                    lastName varchar(100),\r\n                                                    age TINYINT)\r\n                            \"\"\")\r\n                    .executeUpdate();\r\n\r\n            session.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (sessionFactory.isOpen()) {\r\n                sessionFactory.openSession().getTransaction().rollback();\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void dropUsersTable() {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.beginTransaction();\r\n            session.createNativeQuery(\"DROP TABLE IF EXISTS users\")\r\n                    .executeUpdate();\r\n\r\n            session.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (sessionFactory.isOpen()) {\r\n                sessionFactory.openSession().getTransaction().rollback();\r\n            }\r\n            throw e;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void saveUser(String name, String lastName, byte age) {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.beginTransaction();\r\n\r\n            session.persist(new User(name, lastName, age));\r\n            session.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (sessionFactory.isOpen()) {\r\n                sessionFactory.openSession().getTransaction().rollback();\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void removeUserById(long id) {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.beginTransaction();\r\n            session.remove(session.get(User.class, id));\r\n\r\n            session.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (sessionFactory.isOpen()) {\r\n                sessionFactory.openSession().getTransaction().rollback();\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<User> getAllUsers() {\r\n\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.beginTransaction();\r\n\r\n            return session.createQuery(\"FROM User\", User.class).getResultList();\r\n        } catch (Exception e) {\r\n            if (sessionFactory.isOpen()) {\r\n                sessionFactory.openSession().getTransaction().rollback();\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void cleanUsersTable() {\r\n\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.beginTransaction();\r\n\r\n            session.createNativeQuery(\"TRUNCATE TABLE users\").executeUpdate();\r\n            session.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (sessionFactory.isOpen()) {\r\n                sessionFactory.openSession().getTransaction().rollback();\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/jm/task/core/jdbc/dao/UserDaoHibernateImpl.java b/src/main/java/jm/task/core/jdbc/dao/UserDaoHibernateImpl.java
--- a/src/main/java/jm/task/core/jdbc/dao/UserDaoHibernateImpl.java	(revision ea98176587c75d988eacfdc62c2f372fd86dbcc1)
+++ b/src/main/java/jm/task/core/jdbc/dao/UserDaoHibernateImpl.java	(date 1726744289518)
@@ -11,12 +11,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class UserDaoHibernateImpl extends Util implements UserDao {
+public class UserDaoHibernateImpl implements UserDao {
 
     SessionFactory sessionFactory;
 
     public UserDaoHibernateImpl() {
-        sessionFactory = getConfiguration();
+        sessionFactory = Util.getConfiguration();
         sessionFactory.openSession();
     }
 
